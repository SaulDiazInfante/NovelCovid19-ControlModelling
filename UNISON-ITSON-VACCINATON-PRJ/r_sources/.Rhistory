require(ggplot2)
contact_matrix <- matrix(0, nrow = 3, ncol = 3)
contact_matrix[1, 1] = 7
contact_matrix[1, 2] = 5
contact_matrix[1, 3] = 1
contact_matrix[2, 1] = 2
contact_matrix[2, 2] = 9
contact_matrix[2, 3] = 1
contact_matrix[3, 1] = 1
contact_matrix[3, 2] = 3
contact_matrix[3, 3] = 2
# Parameters
parameters <- c(b = 0.05,
contact_matrix = contact_matrix,
gamma = 1/5)
# Run simulation for 3 months
times <- seq(from = 0, to = 90, by = 0.1)
# MODEL FUNCTION
sir_age_model <- function(time, state, parameters) {
with(as.list(parameters), {
n_agegroups <- 3
S <- state[1:n_agegroups]
I <- state[(n_agegroups + 1):(2 * n_agegroups)]
R <- state[(2 * n_agegroups + 1):(3 * n_agegroups)]
N <- S + I + R
lambda <- b * contact_matrix %*% as.matrix(I / N)
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
```
```{r}
vacc_cov1 <- 1
vacc_cov2 <- 0
vacc_cov3 <- 0
vacc_eff3 <- 0.5
# Effective vaccine coverage for each age group:
p1 <- vacc_cov1
p2 <- vacc_cov2
p3 <- vacc_cov3 * vacc_eff3
# Population size in total and for each age group:
N <- 1000000
N1 <- 0.2 * N
N2 <- 0.65 * N
N3 <- 0.15 * N
# Fill in initial state values for a naive population based on effective vaccine coverage:
initial_state_values <- c(S1 = N1 - p1 * N1,
S2 = N2 - p2 * N2,
S3 = N3 - p3 * N3,
I1 = 1,
I2 = 0,
I3 = 0,
R1 = p1 * N1,
R2 = p2 * N2,
R3 = p3 * N3)
# Run model output
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_age_model,
parms = parameters))
results1 <- data.frame(child_cum_inc = output$S1[1] -
output$S1[nrow(output)],
adult_cum_inc = output$S2[1] -
output$S2[nrow(output)],
elderly_cum_inc = output$S3[1] -
output$S3[nrow(output)],
total_cum_inc = sum(output[1, c("S1", "S2", "S3")]) -
sum(output[nrow(output), c("S1", "S2", "S3")]))
print(results1)
```
require(deSolve)
require(reshape2)
require(ggplot2)
contact_matrix <- matrix(0, nrow = 3, ncol = 3)
contact_matrix[1, 1] = 7
contact_matrix[1, 2] = 5
contact_matrix[1, 3] = 1
contact_matrix[2, 1] = 2
contact_matrix[2, 2] = 9
contact_matrix[2, 3] = 1
contact_matrix[3, 1] = 1
contact_matrix[3, 2] = 3
contact_matrix[3, 3] = 2
# Parameters
parameters <- c(b = 0.05,
contact_matrix = contact_matrix,
gamma = 1/5)
# Run simulation for 3 months
times <- seq(from = 0, to = 90, by = 0.1)
# MODEL FUNCTION
sir_age_model <- function(time, state, parameters) {
with(as.list(parameters), {
n_agegroups <- 3
S <- state[1:n_agegroups]
I <- state[(n_agegroups + 1):(2 * n_agegroups)]
R <- state[(2 * n_agegroups + 1):(3 * n_agegroups)]
N <- S + I + R
lambda <- b * contact_matrix %*% as.matrix(I / N)
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
print(results1)
---
title: "Mod_2_notebook_3_Interventions_in_an_Age-structured_Population"
author: "Saul Diaz Infante Velasco"
date: "6/21/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
# PACKAGES
require(deSolve)
require(reshape2)
require(ggplot2)
contact_matrix <- matrix(0, nrow = 3, ncol = 3)
contact_matrix[1, 1] = 7
contact_matrix[1, 2] = 5
contact_matrix[1, 3] = 1
contact_matrix[2, 1] = 2
contact_matrix[2, 2] = 9
contact_matrix[2, 3] = 1
contact_matrix[3, 1] = 1
contact_matrix[3, 2] = 3
contact_matrix[3, 3] = 2
# Parameters
parameters <- c(b = 0.05,
contact_matrix = contact_matrix,
gamma = 1/5)
# Run simulation for 3 months
times <- seq(from = 0, to = 90, by = 0.1)
# MODEL FUNCTION
sir_age_model <- function(time, state, parameters) {
with(as.list(parameters), {
n_agegroups <- 3
S <- state[1:n_agegroups]
I <- state[(n_agegroups + 1):(2 * n_agegroups)]
R <- state[(2 * n_agegroups + 1):(3 * n_agegroups)]
N <- S + I + R
lambda <- b * contact_matrix %*% as.matrix(I / N)
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
```
```{r}
vacc_cov1 <- 1
vacc_cov2 <- 0
vacc_cov3 <- 0
vacc_eff3 <- 0.5
# Effective vaccine coverage for each age group:
p1 <- vacc_cov1
p2 <- vacc_cov2
p3 <- vacc_cov3 * vacc_eff3
# Population size in total and for each age group:
N <- 1000000
N1 <- 0.2 * N
N2 <- 0.65 * N
N3 <- 0.15 * N
# Fill in initial state values for a naive population based on effective vaccine coverage:
initial_state_values <- c(S1 = N1 - p1 * N1,
S2 = N2 - p2 * N2,
S3 = N3 - p3 * N3,
I1 = 1,
I2 = 0,
I3 = 0,
R1 = p1 * N1,
R2 = p2 * N2,
R3 = p3 * N3)
# Run model output
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_age_model,
parms = parameters))
results1 <- data.frame(child_cum_inc = output$S1[1] -
output$S1[nrow(output)],
adult_cum_inc = output$S2[1] -
output$S2[nrow(output)],
elderly_cum_inc = output$S3[1] -
output$S3[nrow(output)],
total_cum_inc = sum(output[1, c("S1", "S2", "S3")]) -
sum(output[nrow(output), c("S1", "S2", "S3")]))
print(results1)
```
```{r}
vacc_cov1 <- 0
vacc_cov2 <- 0.38
vacc_cov3 <- 0
vacc_eff3 <- 0.5
# Effective vaccine coverage for each age group:
p1 <- vacc_cov1
p2 <- vacc_cov2
p3 <- vacc_cov3 * vacc_eff3
# Population size in total and for each age group:
N <- 1000000
N1 <- 0.2 * N
N2 <- 0.65 * N
N3 <- 0.15 * N
initial_state_values <- c(S1 = N1 - p1 * N1,
S2 = N2 - p2 * N2,
S3 = N3 - p3 * N3,
I1 = 1,
I2 = 0,
I3 = 0,
R1 = p1 * N1,
R2 = p2 * N2,
R3 = p3 * N3)
# Run model output
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_age_model,
parms = parameters))
# Calculate cumulative incidence in each age group:
results2 <- data.frame(child_cum_inc =
output$S1[1] - output$S1[nrow(output)],
adult_cum_inc =
output$S2[1] - output$S2[nrow(output)],
elderly_cum_inc =
output$S3[1] - output$S3[nrow(output)],
total_cum_inc =
sum(output[1,c("S1", "S2", "S3")]) -
sum(output[nrow(output),c("S1", "S2", "S3")]))
vacc_cov1 <- 0
vacc_cov2 <- 0
vacc_cov3 <- 1
vacc_eff3 <- 0.5
p1 <- vacc_cov1
p2 <- vacc_cov2
p3 <- vacc_cov3 * vacc_eff3
N <- 1000000
N1 <- 0.2 * N
N2 <- 0.65 * N
N3 <- 0.15 * N
initial_state_values <- c(S1 = N1 - p1 * N1,
S2 = N2 - p2 * N2,
S3 = N3 - p3 * N3,
I1 = 1,
I2 = 0,
I3 = 0,
R1 = p1 * N1,
R2 = p2 * N2,
R3 = p3 * N3)
# Run model output
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_age_model,
parms = parameters))
# Calculate cumulative incidence in each age group:
results3 <- data.frame(child_cum_inc =
output$S1[1] - output$S1[nrow(output)],
adult_cum_inc =
output$S2[1] - output$S2[nrow(output)],
elderly_cum_inc =
output$S3[1] - output$S3[nrow(output)],
total_cum_inc =
sum(output[1,c("S1", "S2", "S3")]) -
sum(output[nrow(output),c("S1", "S2", "S3")]))
print(rbind(results1, results2, results3))
```
```{r}
# Baseline prevalence (no vaccine)
vacc_cov1 <- 0
vacc_cov2 <- 0
vacc_cov3 <- 0
vacc_eff3 <- 0.5
# Effective vaccine coverage for each age group:
p1 <- vacc_cov1
p2 <- vacc_cov2
p3 <- vacc_cov3 * vacc_eff3
N <- 1000000
N1 <- 0.2 * N
N2 <- 0.65 * N
N3 <- 0.15 * N
# Fill in initial state values for a naive population based on effective vaccine coverage:
initial_state_values <- c(S1 = N1 - p1 * N1,
S2 = N2 - p2 * N2,
S3 = N3 - p3 * N3,
I1 = 1,        # the outbreak starts with 1 infected person (can be of either age)
I2 = 0,
I3 = 0,
R1 = p1 * N1,
R2 = p2 * N2,
R3 = p3 * N3)
# Run model output
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_age_model,
parms = parameters))
# Calculate cumulative incidence in each age group:
baseline_results <-
data.frame(child_cum_inc =
output$S1[1] -
output$S1[nrow(output)],
adult_cum_inc =
output$S2[1] - output$S2[nrow(output)],
elderly_cum_inc =
output$S3[1] - output$S3[nrow(output)],
total_cum_inc = sum(output[1,c("S1", "S2", "S3")]) -
sum(output[nrow(output),c("S1", "S2", "S3")]))
vacc_cov1 <- 0.25
vacc_cov2 <- 0.25
vacc_cov3 <- 0.25
vacc_eff3 <- 0.5
p1 <- vacc_cov1
p2 <- vacc_cov2
p3 <- vacc_cov3 * vacc_eff3
N <- 1000000
N1 <- 0.2 * N
N2 <- 0.65 * N
N3 <- 0.15 * N
initial_state_values <- c(S1 = N1 - p1 * N1,
S2 = N2 - p2 * N2,
S3 = N3 - p3 * N3,
I1 = 1,
I2 = 0,
I3 = 0,
R1 = p1 * N1,
R2 = p2 * N2,
R3 = p3 * N3)
# Run model output
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_age_model,
parms = parameters))
# Calculate cumulative incidence in each age group:
results4 <-
data.frame(child_cum_inc = output$S1[1] - output$S1[nrow(output)],
adult_cum_inc = output$S2[1] - output$S2[nrow(output)],
elderly_cum_inc = output$S3[1] - output$S3[nrow(output)],
total_cum_inc = sum(output[1,c("S1", "S2", "S3")]) -
sum(output[nrow(output),c("S1", "S2", "S3")]))
print(baseline_results)
print(results4)
```
# Calculate cumulative incidence in each age group:
results4 <-
data.frame(child_cum_inc = output$S1[1] - output$S1[nrow(output)],
adult_cum_inc = output$S2[1] - output$S2[nrow(output)],
elderly_cum_inc = output$S3[1] - output$S3[nrow(output)],
total_cum_inc =
sum(output[1, c("S1", "S2", "S3")]) -
sum(output[nrow(output), c("S1", "S2", "S3")]))
print(baseline_results)
print(results4)
install.packages("rstan")
install.packages("rstan")
library(gridExtra)
head(influenza_england_1978_school)
library(outbreaks)
library(tidyverse)
library(rstan)
library(gridExtra)
clear
install.packages("rstan")
clar
clear
install.packages("rstan", dependencies = TRUE)
install.packages("shinystan")
clear
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
?MHadaptive
library(MHadaptive)
?`MHadaptive-package`
?dnorm
dexp
?dexp
version
q()
q()
clear
ls
clear
library(RColorBrewer)
display.brewer.all()
display.brewer.pal(n = 8, name = 'Dark2')
brewer.pal(n = 8, name = "Dark2")
library(wesanderson)
install.packages('wesanderson')
library(wesanderson)
pal <- wes_palette("Zissou1", 10, type = "discrete")
pal <- wes_palette("Zissou1", 5, type = "discrete")
pal
install.packages(ggsci)
install.packages('ggsci')
scale_color_npg()
librry('ggsci')
library('ggsci')
scale_color_npg()
scale_color_npg.pallet
scale_color_npg.pallet()
pal_npg()
pal_npg(5)
pal <- pal_npg()
pal
pal_npg("nrc", alpha = 0.7)(9)
pal_lancet("lanonc", alpha=0.7)(9)
pal_lancet("lanonc", alpha=1)(9)
library("RColorBrewer")
brewer.pal(12, "Paired")
display.brewer.pal(12, "Paired")
brewer.pal(18, "Paired")
brewer.pal(10, "Paired")
brewer.pal(18, "Paired")display.brewer.all()
display.brewer.all()
display.brewer.accent()
brewer.pal(8, "Accent")
setwd("~/sauld@cimat.mx/UNISON/Articles/NovelCovid-19/NovelCovid19-ControlModelling/NovelCovid19-ControlModellingGitHub/UNISON-ITSON-VACCINATON-PRJ/r_sources")
library(plotly)
epsilon_bar   <- 0.3905
beta_a  <- 0.6441 * epsilon_bar
beta_s  <- 0.9303 * epsilon_bar
p  <-  0.1213
alpha_s  <-  1/10.81
alpha_a  <-  1/5.97
mu      <- 0.00003653
delta_e   <- 1/5.1
delta_r   <- 1/365
delta_v   <- 1/180
R0 <-
(p * delta_e * beta_s) /
(
(mu + delta_e) * (mu + alpha_s)
) + ((1 - p) * delta_e * beta_a) /
(
(mu + alpha_a) * (mu + delta_e)
)
epsilon <- seq(0,1,0.001)
lambda_v   <- seq(0,0.009,0.000009)
Rv <- matrix(data = 0.0,
nrow = length(epsilon), ncol = length(lambda_v))
for (i in seq(1,length(epsilon),1)){
for (j in seq(1,length(lambda_v),1)){
reduction_factor <-
1.0 -
(epsilon[i] * lambda_v[j]) / (mu + delta_v + lambda_v[j])
Rv[i,j] <- R0 * reduction_factor
#
}
}
for (i in seq(1,length(epsilon),1)){
for (j in seq(1,length(lambda_v),1)){
reduction_factor <-
1.0 -
(epsilon[i] * lambda_v[j]) / (mu + delta_v + lambda_v[j])
Rv[i,j] <- R0 * reduction_factor
#
}
}
f <- list(
family = "Arial",
size = 14
)
x_a <- list(
title = "Vaccine Efficacy",
titlefont = f
)
y_a <- list(
title = "Vaccination Rate",
titlefont = f
)
data_1  <- data.frame(epsilon, lambda_v, Rv)
fig1 <- plot_ly(showscale = TRUE)
fig1 <- fig1 %>%
add_contour(
data_1,
x = ~epsilon,
y = ~lambda_v,
z = ~Rv,
contours =
list(
showlabels = TRUE,
labelfont = list(size = 15, color = 'white')
),
showlegend = TRUE
)
fig1 <- fig1 %>%
layout(xaxis = x_a, yaxis = y_a)
fig1 <- fig1 %>%
add_lines(
x = ~epsilon,
y = 0.000611352,
line = list(color = "lightgray", width = 2),
showlegend = FALSE
)
fig1 <- fig1 %>%
add_lines(x = ~epsilon,
y = 0.0071,
line = list(color = "white", width = 2),
showlegend = FALSE
)
fig1 <- fig1 %>%
add_lines(
x = 0.8,
y = ~lambda_v,
line = list(color = "gray", width = 2),
showlegend = FALSE
)
orca(fig1, "R0_contour.png")
fig1
